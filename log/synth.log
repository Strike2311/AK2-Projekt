Qflow synthesis logfile created on pon, 15 cze 2020, 18:47:31 CEST
Running yosys for verilog parsing and synthesis
yosys  -s PPA_adder.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)


-- Executing script file `PPA_adder.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `/home/artur/proj/source/PPA_adder.v' to AST representation.
Generating RTLIL representation for module `\indicate_carry'.
Generating RTLIL representation for module `\t_generator'.
Generating RTLIL representation for module `\GP_module'.
Generating RTLIL representation for module `\add_pos'.
Generating RTLIL representation for module `\PPA_adder'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \PPA_adder
Used module:     \add_pos
Used module:     \GP_module
Used module:     \indicate_carry
Used module:     \t_generator

3.1.2. Analyzing design hierarchy..
Top module:  \PPA_adder
Used module:     \add_pos
Used module:     \GP_module
Used module:     \indicate_carry
Used module:     \t_generator
Removed 0 unused modules.
Mapping positional arguments of cell PPA_adder.S5 (add_pos).
Mapping positional arguments of cell PPA_adder.S4 (add_pos).
Mapping positional arguments of cell PPA_adder.S3 (add_pos).
Mapping positional arguments of cell PPA_adder.S2 (add_pos).
Mapping positional arguments of cell PPA_adder.S1 (add_pos).
Mapping positional arguments of cell PPA_adder.S0 (add_pos).
Mapping positional arguments of cell PPA_adder.mod_5_0 (GP_module).
Mapping positional arguments of cell PPA_adder.mod_5_4 (GP_module).
Mapping positional arguments of cell PPA_adder.mod_4_0 (GP_module).
Mapping positional arguments of cell PPA_adder.mod_3_0 (GP_module).
Mapping positional arguments of cell PPA_adder.mod_3_2 (GP_module).
Mapping positional arguments of cell PPA_adder.mod_2_0 (GP_module).
Mapping positional arguments of cell PPA_adder.mod_1_0 (GP_module).
Mapping positional arguments of cell PPA_adder.Carry_in (indicate_carry).
Mapping positional arguments of cell PPA_adder.gen5 (t_generator).
Mapping positional arguments of cell PPA_adder.gen4 (t_generator).
Mapping positional arguments of cell PPA_adder.gen3 (t_generator).
Mapping positional arguments of cell PPA_adder.gen2 (t_generator).
Mapping positional arguments of cell PPA_adder.gen1 (t_generator).
Mapping positional arguments of cell PPA_adder.gen0 (t_generator).

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \PPA_adder..
Finding unused cells or wires in module \add_pos..
Finding unused cells or wires in module \GP_module..
Finding unused cells or wires in module \t_generator..
Finding unused cells or wires in module \indicate_carry..

3.5. Executing CHECK pass (checking for obvious problems).
checking module GP_module..
checking module PPA_adder..
checking module add_pos..
checking module indicate_carry..
checking module t_generator..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GP_module'.
Finding identical cells in module `\PPA_adder'.
Finding identical cells in module `\add_pos'.
Finding identical cells in module `\indicate_carry'.
Finding identical cells in module `\t_generator'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \GP_module..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PPA_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_pos..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \indicate_carry..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \t_generator..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \GP_module.
  Optimizing cells in module \PPA_adder.
  Optimizing cells in module \add_pos.
  Optimizing cells in module \indicate_carry.
  Optimizing cells in module \t_generator.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GP_module'.
Finding identical cells in module `\PPA_adder'.
Finding identical cells in module `\add_pos'.
Finding identical cells in module `\indicate_carry'.
Finding identical cells in module `\t_generator'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GP_module..
Finding unused cells or wires in module \PPA_adder..
Finding unused cells or wires in module \add_pos..
Finding unused cells or wires in module \indicate_carry..
Finding unused cells or wires in module \t_generator..

3.6.8. Executing OPT_EXPR pass (perform const folding).

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).

3.8. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module GP_module:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module PPA_adder:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module add_pos:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module indicate_carry:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module t_generator:
  created 0 $alu and 0 $macc cells.

3.9. Executing SHARE pass (SAT-based resource sharing).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GP_module'.
Finding identical cells in module `\PPA_adder'.
Finding identical cells in module `\add_pos'.
Finding identical cells in module `\indicate_carry'.
Finding identical cells in module `\t_generator'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \GP_module..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PPA_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_pos..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \indicate_carry..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \t_generator..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \GP_module.
  Optimizing cells in module \PPA_adder.
  Optimizing cells in module \add_pos.
  Optimizing cells in module \indicate_carry.
  Optimizing cells in module \t_generator.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GP_module'.
Finding identical cells in module `\PPA_adder'.
Finding identical cells in module `\add_pos'.
Finding identical cells in module `\indicate_carry'.
Finding identical cells in module `\t_generator'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GP_module..
Finding unused cells or wires in module \PPA_adder..
Finding unused cells or wires in module \add_pos..
Finding unused cells or wires in module \indicate_carry..
Finding unused cells or wires in module \t_generator..

3.10.8. Executing OPT_EXPR pass (perform const folding).

3.10.9. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GP_module..
Finding unused cells or wires in module \PPA_adder..
Finding unused cells or wires in module \add_pos..
Finding unused cells or wires in module \indicate_carry..
Finding unused cells or wires in module \t_generator..

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GP_module'.
Finding identical cells in module `\PPA_adder'.
Finding identical cells in module `\add_pos'.
Finding identical cells in module `\indicate_carry'.
Finding identical cells in module `\t_generator'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GP_module..
Finding unused cells or wires in module \PPA_adder..
Finding unused cells or wires in module \add_pos..
Finding unused cells or wires in module \indicate_carry..
Finding unused cells or wires in module \t_generator..

3.12.5. Finished fast OPT passes.

3.13. Executing MEMORY pass.

3.13.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.13.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GP_module..
Finding unused cells or wires in module \PPA_adder..
Finding unused cells or wires in module \add_pos..
Finding unused cells or wires in module \indicate_carry..
Finding unused cells or wires in module \t_generator..

3.13.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GP_module..
Finding unused cells or wires in module \PPA_adder..
Finding unused cells or wires in module \add_pos..
Finding unused cells or wires in module \indicate_carry..
Finding unused cells or wires in module \t_generator..

3.13.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GP_module..
Finding unused cells or wires in module \PPA_adder..
Finding unused cells or wires in module \add_pos..
Finding unused cells or wires in module \indicate_carry..
Finding unused cells or wires in module \t_generator..

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GP_module'.
Finding identical cells in module `\PPA_adder'.
Finding identical cells in module `\add_pos'.
Finding identical cells in module `\indicate_carry'.
Finding identical cells in module `\t_generator'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GP_module..
Finding unused cells or wires in module \PPA_adder..
Finding unused cells or wires in module \add_pos..
Finding unused cells or wires in module \indicate_carry..
Finding unused cells or wires in module \t_generator..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GP_module'.
Finding identical cells in module `\PPA_adder'.
Finding identical cells in module `\add_pos'.
Finding identical cells in module `\indicate_carry'.
Finding identical cells in module `\t_generator'.
Removed a total of 0 cells.

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \GP_module..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PPA_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_pos..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \indicate_carry..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \t_generator..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \GP_module.
  Optimizing cells in module \PPA_adder.
  Optimizing cells in module \add_pos.
  Optimizing cells in module \indicate_carry.
  Optimizing cells in module \t_generator.
Performed a total of 0 changes.

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GP_module'.
Finding identical cells in module `\PPA_adder'.
Finding identical cells in module `\add_pos'.
Finding identical cells in module `\indicate_carry'.
Finding identical cells in module `\t_generator'.
Removed a total of 0 cells.

3.17.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GP_module..
Finding unused cells or wires in module \PPA_adder..
Finding unused cells or wires in module \add_pos..
Finding unused cells or wires in module \indicate_carry..
Finding unused cells or wires in module \t_generator..

3.17.8. Executing OPT_EXPR pass (perform const folding).

3.17.9. Finished OPT passes. (There is nothing left to do.)

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping indicate_carry.$and$/home/artur/proj/source/PPA_adder.v:6$1 ($and) with simplemap.
Mapping indicate_carry.$or$/home/artur/proj/source/PPA_adder.v:7$2 ($or) with simplemap.
Mapping t_generator.$and$/home/artur/proj/source/PPA_adder.v:14$3 ($and) with simplemap.
Mapping t_generator.$or$/home/artur/proj/source/PPA_adder.v:15$4 ($or) with simplemap.
Mapping t_generator.$xor$/home/artur/proj/source/PPA_adder.v:16$5 ($xor) with simplemap.
Mapping GP_module.$and$/home/artur/proj/source/PPA_adder.v:24$6 ($and) with simplemap.
Mapping GP_module.$or$/home/artur/proj/source/PPA_adder.v:25$7 ($or) with simplemap.
Mapping GP_module.$and$/home/artur/proj/source/PPA_adder.v:26$8 ($and) with simplemap.
Mapping add_pos.$xor$/home/artur/proj/source/PPA_adder.v:33$9 ($xor) with simplemap.
No more expansions possible.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GP_module'.
Finding identical cells in module `\PPA_adder'.
Finding identical cells in module `\add_pos'.
Finding identical cells in module `\indicate_carry'.
Finding identical cells in module `\t_generator'.
Removed a total of 0 cells.

3.19.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GP_module..
Finding unused cells or wires in module \PPA_adder..
Finding unused cells or wires in module \add_pos..
Finding unused cells or wires in module \indicate_carry..
Finding unused cells or wires in module \t_generator..

3.19.5. Finished fast OPT passes.

3.20. Executing ABC pass (technology mapping using ABC).

3.20.1. Extracting gate netlist of module `\GP_module' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 2 outputs.

3.20.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        2
Removing temp directory.

3.20.2. Extracting gate netlist of module `\PPA_adder' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.20.3. Extracting gate netlist of module `\add_pos' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

3.20.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.3.2. Re-integrating ABC results.
ABC RESULTS:               XOR cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

3.20.4. Extracting gate netlist of module `\indicate_carry' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 5 wires to a netlist network with 3 inputs and 1 outputs.

3.20.4.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

3.20.5. Extracting gate netlist of module `\t_generator' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 5 wires to a netlist network with 2 inputs and 3 outputs.

3.20.5.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:               XOR cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        3
Removing temp directory.

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GP_module'.
Finding identical cells in module `\PPA_adder'.
Finding identical cells in module `\add_pos'.
Finding identical cells in module `\indicate_carry'.
Finding identical cells in module `\t_generator'.
Removed a total of 0 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GP_module..
  removing unused non-port wire \gate_and.
  removed 1 unused temporary wires.
Finding unused cells or wires in module \PPA_adder..
Finding unused cells or wires in module \add_pos..
Finding unused cells or wires in module \indicate_carry..
  removing unused non-port wire \gate_and.
  removed 1 unused temporary wires.
Finding unused cells or wires in module \t_generator..

3.21.5. Finished fast OPT passes.

3.22. Executing HIERARCHY pass (managing design hierarchy).

3.22.1. Analyzing design hierarchy..
Top module:  \PPA_adder
Used module:     \indicate_carry
Used module:     \add_pos
Used module:     \t_generator
Used module:     \GP_module

3.22.2. Analyzing design hierarchy..
Top module:  \PPA_adder
Used module:     \indicate_carry
Used module:     \add_pos
Used module:     \t_generator
Used module:     \GP_module
Removed 0 unused modules.

3.23. Printing statistics.

=== GP_module ===

   Number of wires:                  7
   Number of wire bits:              7
   Number of public wires:           6
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_AND_                          2
     $_OR_                           1

=== PPA_adder ===

   Number of wires:                 38
   Number of wire bits:             53
   Number of public wires:          38
   Number of public wire bits:      53
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 20
     GP_module                       7
     add_pos                         6
     indicate_carry                  1
     t_generator                     6

=== add_pos ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_XOR_                          1

=== indicate_carry ===

   Number of wires:                  5
   Number of wire bits:              5
   Number of public wires:           4
   Number of public wire bits:       4
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $_AND_                          1
     $_OR_                           1

=== t_generator ===

   Number of wires:                  5
   Number of wire bits:              5
   Number of public wires:           5
   Number of public wire bits:       5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_AND_                          1
     $_OR_                           1
     $_XOR_                          1

=== design hierarchy ===

   PPA_adder                         1
     GP_module                       7
     add_pos                         6
     indicate_carry                  1
     t_generator                     6

   Number of wires:                140
   Number of wire bits:            155
   Number of public wires:         132
   Number of public wire bits:     147
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 47
     $_AND_                         21
     $_OR_                          14
     $_XOR_                         12

3.24. Executing CHECK pass (checking for obvious problems).
checking module GP_module..
checking module PPA_adder..
checking module add_pos..
checking module indicate_carry..
checking module t_generator..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\GP_module':
Mapping DFF cells in module `\PPA_adder':
Mapping DFF cells in module `\add_pos':
Mapping DFF cells in module `\indicate_carry':
Mapping DFF cells in module `\t_generator':

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GP_module'.
Finding identical cells in module `\PPA_adder'.
Finding identical cells in module `\add_pos'.
Finding identical cells in module `\indicate_carry'.
Finding identical cells in module `\t_generator'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \GP_module..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PPA_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_pos..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \indicate_carry..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \t_generator..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \GP_module.
  Optimizing cells in module \PPA_adder.
  Optimizing cells in module \add_pos.
  Optimizing cells in module \indicate_carry.
  Optimizing cells in module \t_generator.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\GP_module'.
Finding identical cells in module `\PPA_adder'.
Finding identical cells in module `\add_pos'.
Finding identical cells in module `\indicate_carry'.
Finding identical cells in module `\t_generator'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \GP_module..
Finding unused cells or wires in module \PPA_adder..
Finding unused cells or wires in module \add_pos..
Finding unused cells or wires in module \indicate_carry..
Finding unused cells or wires in module \t_generator..

5.8. Executing OPT_EXPR pass (perform const folding).

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\GP_module' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 2 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:           NAND2X1 cells:        2
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        2
Removing temp directory.

6.2. Extracting gate netlist of module `\PPA_adder' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

6.3. Extracting gate netlist of module `\add_pos' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

6.3.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.3.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:            NOR2X1 cells:        2
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

6.4. Extracting gate netlist of module `\indicate_carry' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 5 wires to a netlist network with 3 inputs and 1 outputs.

6.4.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.4.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:           NAND2X1 cells:        2
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

6.5. Extracting gate netlist of module `\t_generator' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 5 wires to a netlist network with 2 inputs and 3 outputs.

6.5.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.5.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:            NOR2X1 cells:        2
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        3
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
Mapping PPA_adder.gen0 using t_generator.
Mapping PPA_adder.gen1 using t_generator.
Mapping PPA_adder.gen2 using t_generator.
Mapping PPA_adder.gen3 using t_generator.
Mapping PPA_adder.gen4 using t_generator.
Mapping PPA_adder.gen5 using t_generator.
Mapping PPA_adder.Carry_in using indicate_carry.
Mapping PPA_adder.mod_1_0 using GP_module.
Mapping PPA_adder.mod_2_0 using GP_module.
Mapping PPA_adder.mod_3_2 using GP_module.
Mapping PPA_adder.mod_3_0 using GP_module.
Mapping PPA_adder.mod_4_0 using GP_module.
Mapping PPA_adder.mod_5_4 using GP_module.
Mapping PPA_adder.mod_5_0 using GP_module.
Mapping PPA_adder.S0 using add_pos.
Mapping PPA_adder.S1 using add_pos.
Mapping PPA_adder.S2 using add_pos.
Mapping PPA_adder.S3 using add_pos.
Mapping PPA_adder.S4 using add_pos.
Mapping PPA_adder.S5 using add_pos.
No more expansions possible.
Deleting now unused module GP_module.
Deleting now unused module add_pos.
Deleting now unused module indicate_carry.
Deleting now unused module t_generator.
Removed 5 unused cells and 196 unused wires.

8. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port PPA_adder.c_in: Missing option -inpad.
Mapping port PPA_adder.c_out using BUFX2.
Mapping port PPA_adder.result using BUFX2.
Don't map input port PPA_adder.sum_comp_1: Missing option -inpad.
Don't map input port PPA_adder.sum_comp_2: Missing option -inpad.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\PPA_adder'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \PPA_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \PPA_adder.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\PPA_adder'.
Removed a total of 0 cells.

9.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \PPA_adder..

9.8. Executing OPT_EXPR pass (perform const folding).

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing BLIF backend.

11. Printing statistics.

=== PPA_adder ===

   Number of wires:                 73
   Number of wire bits:             88
   Number of public wires:          73
   Number of public wire bits:      88
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 75
     AND2X2                         14
     BUFX2                           7
     INVX1                          14
     NAND2X1                        16
     NOR2X1                         24

End of script. Logfile hash: d8fc078d53
CPU: user 0.31s system 0.00s, MEM: 36.63 MB total, 9.54 MB resident
Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)
Time spent: 19% 15x opt_expr (0 sec), 18% 1x share (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef
Cleaning up output syntax
ypostproc.tcl PPA_adder_mapped.blif PPA_adder /usr/local/share/qflow/tech/osu035/osu035.sh vdd gnd 
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 200 -c 30 -I PPA_adder_nofanout -s nullstring -p /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif PPA_adder.blif

blifFanout for qflow 1.3.17
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 4 (load 159.671) from node S2.c,
driven by NAND2X1 with strength 102.232 (fF driven at latency 200)
Top fanout load-to-strength ratio is 0.936392 (latency = 187.278 ps)
Top input node fanout is 3 (load 58.2514) from node c_in.
0 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 54    	Out: 54    	+0
	"2" gates	In: 21    	Out: 21    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/artur/proj/synthesis
Files:
   Verilog: /home/artur/proj/synthesis/PPA_adder.rtl.v
   Verilog: /home/artur/proj/synthesis/PPA_adder.rtlnopwr.v
   Verilog: /home/artur/proj/synthesis/PPA_adder.rtlbb.v
   Spice:   /home/artur/proj/synthesis/PPA_adder.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" PPA_adder.spc PPA_adder.xspice

Synthesis script ended on pon, 15 cze 2020, 18:47:33 CEST
